% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zaUtils.R
\name{read.table}
\alias{read.table}
\title{This edited versin of \code{\link[utils:read.table]{utils::read.table}} detects compressed files from their file endings and directly reads them without unpacking.}
\usage{
read.table(
  file,
  header = FALSE,
  sep = "",
  fileEncoding = "",
  ...,
  keepOriginalColnames = FALSE,
  chooseColumns = NULL,
  RtoolsBin = agsPath(paste0(c("C:/Program Files", "C:/Tools",
    "//evdad.admin.ch/AGROSCOPE_OS/2/5/2/1/3/1/4269/B0000/driversEtc",
    "//evdad.admin.ch/AGROSCOPE_OS/0/4/5/3811/Dokumente/R_Uebung/sonstigeFiles/Rtools/bin"),
    "/Rtools/bin"))
)
}
\arguments{
\item{file}{the name of the file which the data are to be read from.
    Each row of the table appears as one line of the file.  If it does
    not contain an \emph{absolute} path, the file name is
    \emph{relative} to the current working directory,
    \code{\link{getwd}()}. Tilde-expansion is performed where supported.
    This can be a compressed file (see \code{\link{file}}).

    Alternatively, \code{file} can be a readable text-mode
    \link{connection} (which will be opened for reading if
    necessary, and if so \code{\link{close}}d (and hence destroyed) at
    the end of the function call).  (If \code{\link{stdin}()} is used,
    the prompts for lines may be somewhat confusing.  Terminate input
    with a blank line or an EOF signal, \code{Ctrl-D} on Unix and
    \code{Ctrl-Z} on Windows.  Any pushback on \code{stdin()} will be
    cleared before return.)

    \code{file} can also be a complete URL.  (For the supported URL
    schemes, see the \sQuote{URLs} section of the help for
    \code{\link{url}}.)
  }

\item{header}{a logical value indicating whether the file contains the
    names of the variables as its first line.  If missing, the value is
    determined from the file format: \code{header} is set to \code{TRUE}
    if and only if the first row contains one fewer field than the
    number of columns.}

\item{sep}{the field separator character.  Values on each line of the
    file are separated by this character.  If \code{sep = ""} (the
    default for \code{read.table}) the separator is \sQuote{white space},
    that is one or more spaces, tabs, newlines or carriage returns.}

\item{fileEncoding}{character string: if non-empty declares the
    encoding used on a file (not a connection) so the character data can
    be re-encoded.  See the \sQuote{Encoding} section of the help for
    \code{\link{file}}, the \sQuote{R Data Import/Export} manual and
    \sQuote{Note}.
  }

\item{...}{
  Arguments passed on to \code{\link[utils:read.table]{utils::read.table}}
  \describe{
    \item{\code{quote}}{the set of quoting characters. To disable quoting
    altogether, use \code{quote = ""}.  See \code{\link{scan}} for the
    behaviour on quotes embedded in quotes.  Quoting is only considered
    for columns read as character, which is all of them unless
    \code{colClasses} is specified.}
    \item{\code{dec}}{the character used in the file for decimal points.}
    \item{\code{numerals}}{string indicating how to convert numbers whose conversion
    to double precision would lose accuracy, see \code{\link[utils]{type.convert}}.
    Can be abbreviated.  (Applies also to complex-number inputs.)}
    \item{\code{row.names}}{a vector of row names.  This can be a vector giving
    the actual row names, or a single number giving the column of the
    table which contains the row names, or character string giving the
    name of the table column containing the row names.

    If there is a header and the first row contains one fewer field than
    the number of columns, the first column in the input is used for the
    row names.  Otherwise if \code{row.names} is missing, the rows are
    numbered.

    Using \code{row.names = NULL} forces row numbering. Missing or
    \code{NULL} \code{row.names} generate row names that are considered
    to be \sQuote{automatic} (and not preserved by \code{\link{as.matrix}}).
  }
    \item{\code{col.names}}{a vector of optional names for the variables.
    The default is to use \code{"V"} followed by the column number.}
    \item{\code{as.is}}{controls conversion of character variables (insofar as
    they are not converted to logical, numeric or complex) to factors,
    if not otherwise specified by \code{colClasses}.
    Its value is either a vector of logicals (values are recycled if
    necessary), or a vector of numeric or character indices which
    specify which columns should not be converted to factors.

    Note: to suppress all conversions including those of numeric
    columns, set \code{colClasses = "character"}.

    Note that \code{as.is} is specified per column (not per
    variable) and so includes the column of row names (if any) and any
    columns to be skipped.
  }
    \item{\code{na.strings}}{a character vector of strings which are to be
    interpreted as \code{\link{NA}} values.  Blank fields are also
    considered to be missing values in logical, integer, numeric and
    complex fields.  Note that the test happens \emph{after} 
    white space is stripped from the input, so \code{na.strings} 
    values may need their own white space stripped in advance.}
    \item{\code{colClasses}}{character.  A vector of classes to be assumed for
    the columns.  If unnamed, recycled as necessary.  If named, names
    are matched with unspecified values being taken to be \code{NA}.

    Possible values are \code{NA} (the default, when
    \code{\link[utils]{type.convert}} is used), \code{"NULL"} (when the column
    is skipped), one of the atomic vector classes (logical, integer,
    numeric, complex, character, raw), or \code{"factor"}, \code{"Date"}
    or \code{"POSIXct"}.  Otherwise there needs to be an \code{as}
    method (from package \pkg{methods}) for conversion from
    \code{"character"} to the specified formal class.

    Note that \code{colClasses} is specified per column (not per
    variable) and so includes the column of row names (if any).
  }
    \item{\code{nrows}}{integer: the maximum number of rows to read in.  Negative
    and other invalid values are ignored.}
    \item{\code{skip}}{integer: the number of lines of the data file to skip before
    beginning to read data.}
    \item{\code{check.names}}{logical.  If \code{TRUE} then the names of the
    variables in the data frame are checked to ensure that they are
    syntactically valid variable names.  If necessary they are adjusted
    (by \code{\link{make.names}}) so that they are, and also to ensure
    that there are no duplicates.}
    \item{\code{fill}}{logical. If \code{TRUE} then in case the rows have unequal
    length, blank fields are implicitly added.  See \sQuote{Details}.}
    \item{\code{strip.white}}{logical. Used only when \code{sep} has
    been specified, and allows the stripping of leading and trailing
    white space from unquoted \code{character} fields (\code{numeric} fields
    are always stripped).  See \code{\link{scan}} for further details
    (including the exact meaning of \sQuote{white space}),
    remembering that the columns may include the row names.}
    \item{\code{blank.lines.skip}}{logical: if \code{TRUE} blank lines in the
    input are ignored.}
    \item{\code{comment.char}}{character: a character vector of length one
    containing a single character or an empty string.  Use \code{""} to
    turn off the interpretation of comments altogether.}
    \item{\code{allowEscapes}}{logical.  Should C-style escapes such as
    \samp{\\n} be processed or read verbatim (the default)?   Note that if
    not within quotes these could be interpreted as a delimiter (but not
    as a comment character).  For more details see \code{\link{scan}}.}
    \item{\code{flush}}{logical: if \code{TRUE}, \code{scan} will flush to the
    end of the line after reading the last of the fields requested.
    This allows putting comments after the last field.}
    \item{\code{stringsAsFactors}}{logical: should character vectors be converted
    to factors?  Note that this is overridden by \code{as.is} and
    \code{colClasses}, both of which allow finer control.}
    \item{\code{encoding}}{encoding to be assumed for input strings.  It is
    used to mark character strings as known to be in
    Latin-1 or UTF-8 (see \code{\link{Encoding}}): it is not used to
    re-encode the input, but allows \R to handle encoded strings in
    their native encoding (if one of those two).  See \sQuote{Value}
    and \sQuote{Note}.
  }
    \item{\code{text}}{character string: if \code{file} is not supplied and this is,
    then data are read from the value of \code{text} via a text connection.
    Notice that a literal string can be used to include (small) data sets
    within R code.
  }
    \item{\code{skipNul}}{logical: should nuls be skipped?}
  }}

\item{keepOriginalColnames}{Logical value indicating if the original colnames should be kept and special characters should not be replaced by dots '.' which whould be the standard behaviour of the \code{\link[utils:read.table]{utils::read.table}} function.}

\item{chooseColumns}{may be implemented with `scan(file, what=list(Name="", Age=0, ...), sep=";", quiet=TRUE)`. Try it!}

\item{RtoolsBin}{If `!is.null(chooseColumns)`, then Rtools must be installed because the `RtoolsBin/cut.exe` and some dll libraries are needed.
The argument `RtoolsBin` has to indicate the folder in which the Rtools binaries are located. Something like `"C:/Program Files/Rtools/bin"`.}
}
\description{
It is assumed that only one file is within the zip archive. Otherwise the function will give an error message.\cr
Furthermore, it used \code{"ISO-8859-1"} encoding, when data is being read from Agroscope OS-LW.
}
\references{
\href{https://www.datacamp.com/community/tutorials/importing-data-r-part-two}{https://www.datacamp.com/community/tutorials/importing-data-r-part-two}
}
\seealso{
\code{\link[utils:read.table]{utils::read.table}}
}
\author{
Daniel Hoop
}
